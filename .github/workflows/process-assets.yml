name: Process Assets

on:
  workflow_dispatch:
    inputs:
      fps:
        description: "Frames per second"
        required: false
        default: "2.0"
      scale_width:
        description: "Scale width (0 to disable)"
        required: false
        default: "720"
      dedup_threshold:
        description: "Dedup hamming threshold"
        required: false
        default: "8"
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install ffmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Tune config from dispatch inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          INPUT_FPS: ${{ github.event.inputs.fps }}
          INPUT_SCALE_WIDTH: ${{ github.event.inputs.scale_width }}
          INPUT_DEDUP: ${{ github.event.inputs.dedup_threshold }}
        run: |
          python - <<'PY'
          import yaml, os, pathlib
          p = pathlib.Path("config.yaml")
          cfg = yaml.safe_load(p.read_text(encoding="utf-8"))
          def get_float(v, d):
              try:
                  return float(v) if v not in (None, "") else d
              except Exception:
                  return d
          def get_int(v, d):
              try:
                  return int(v) if v not in (None, "") else d
              except Exception:
                  return d
          cfg['fps'] = get_float(os.environ.get('INPUT_FPS'), cfg.get('fps', 2.0))
          cfg['scale_width'] = get_int(os.environ.get('INPUT_SCALE_WIDTH'), cfg.get('scale_width', 0))
          cfg['dedup_threshold'] = get_int(os.environ.get('INPUT_DEDUP'), cfg.get('dedup_threshold', 8))
          p.write_text(yaml.safe_dump(cfg, allow_unicode=True, sort_keys=False), encoding="utf-8")
          print("Updated config.yaml:", cfg)
          PY

      - name: Compute input hash key
        id: key
        run: |
          python - <<'PY'
          import hashlib, pathlib, yaml
          cfg = yaml.safe_load(pathlib.Path("config.yaml").read_text())
          h = hashlib.sha256()
          for k in ("video_path","fps","scale_width","dedup_threshold"):
            h.update(str(cfg.get(k)).encode())
          vp = pathlib.Path(cfg["video_path"])
          if vp.exists():
            with vp.open('rb') as f:
              h.update(f.read(10*1024*1024))  # sample first 10MB for speed
          print(f"cache_key={h.hexdigest()[:20]}", file=open(os.environ['GITHUB_OUTPUT'], 'a'))
          PY

      - name: Cache raw/clean frames
        uses: actions/cache@v4
        with:
          path: |
            frames_raw
            frames_clean
            outputs
          key: asset-${{ steps.key.outputs.cache_key }}

      - name: Run pipeline
        run: python scripts/pipeline.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: processed-assets
          path: |
            outputs/*.tar.gz
            outputs/*.txt
          if-no-files-found: warn
          retention-days: 14